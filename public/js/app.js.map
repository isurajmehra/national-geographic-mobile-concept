{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/tiny-slider/dist/tiny-slider.js","src/index.js"],"names":[],"mappingsvsFA;;;;;;AACA;;AAEA,SAAS,QAAT,GAAqB;AACnB,UAAQ,GAAR;AACA,MAAI,SAAS,0BAAI;AACf,eAAW,YADI;AAEf,WAAO,CAFQ;AAGf,aAAS,MAHM;AAIf,cAAU;AAJK,GAAJ,CAAb;AAMD;;AAED,OAAO,gBAAP,CAAwB,MAAxB,EAAgC,QAAhC","file":"app.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","var tns = (function (){\n// keys\nif (!Object.keys) {\n    Object.keys = function (object) {\n        var keys = [];\n        for (var name in object) {\n            if (Object.prototype.hasOwnProperty.call(object, name)) {\n                keys.push(name);\n            }\n        }\n        return keys;\n    };\n}\n\n// ChildNode.remove\n(function () {\n  \"use strict\";\n\n  if(!(\"remove\" in Element.prototype)){\n    Element.prototype.remove = function(){\n      if(this.parentNode) {\n        this.parentNode.removeChild(this);\n      }\n    };\n  }\n})();\n\nfunction extend() {\n  var obj, name, copy,\n      target = arguments[0] || {},\n      i = 1,\n      length = arguments.length;\n\n  for (; i < length; i++) {\n    if ((obj = arguments[i]) !== null) {\n      for (name in obj) {\n        copy = obj[name];\n\n        if (target === copy) {\n          continue;\n        } else if (copy !== undefined) {\n          target[name] = copy;\n        }\n      }\n    }\n  }\n  return target;\n}\n\nfunction checkStorageValue (value) {\n  return ['true', 'false'].indexOf(value) >= 0 ? JSON.parse(value) : value;\n}\n\nfunction setLocalStorage(key, value, access) {\n  if (access) { localStorage.setItem(key, value); }\n  return value;\n}\n\nfunction getSlideId() {\n  var id = window.tnsId;\n  window.tnsId = !id ? 1 : id + 1;\n  \n  return 'tns' + window.tnsId;\n}\n\nfunction getBody () {\n  var doc = document,\n      body = doc.body;\n\n  if (!body) {\n    body = doc.createElement('body');\n    body.fake = true;\n  }\n\n  return body;\n}\n\nvar docElement = document.documentElement;\n\nfunction setFakeBody (body) {\n  var docOverflow = '';\n  if (body.fake) {\n    docOverflow = docElement.style.overflow;\n    //avoid crashing IE8, if background image is used\n    body.style.background = '';\n    //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n    body.style.overflow = docElement.style.overflow = 'hidden';\n    docElement.appendChild(body);\n  }\n\n  return docOverflow;\n}\n\nfunction resetFakeBody (body, docOverflow) {\n  if (body.fake) {\n    body.remove();\n    docElement.style.overflow = docOverflow;\n    // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n    // eslint-disable-next-line\n    docElement.offsetHeight;\n  }\n}\n\n// get css-calc \n// @return - false | calc | -webkit-calc | -moz-calc\n// @usage - var calc = getCalc(); \nfunction calc() {\n  var doc = document, \n      body = getBody(),\n      docOverflow = setFakeBody(body),\n      div = doc.createElement('div'), \n      result = false;\n\n  body.appendChild(div);\n  try {\n    var vals = ['calc(10px)', '-moz-calc(10px)', '-webkit-calc(10px)'], val;\n    for (var i = 0; i < 3; i++) {\n      val = vals[i];\n      div.style.width = val;\n      if (div.offsetWidth === 10) { \n        result = val.replace('(10px)', ''); \n        break;\n      }\n    }\n  } catch (e) {}\n  \n  body.fake ? resetFakeBody(body, docOverflow) : div.remove();\n\n  return result;\n}\n\n// get subpixel support value\n// @return - boolean\nfunction subpixelLayout() {\n  var doc = document,\n      body = getBody(),\n      docOverflow = setFakeBody(body),\n      parent = doc.createElement('div'),\n      child1 = doc.createElement('div'),\n      child2,\n      supported;\n\n  parent.style.cssText = 'width: 10px';\n  child1.style.cssText = 'float: left; width: 5.5px; height: 10px;';\n  child2 = child1.cloneNode(true);\n\n  parent.appendChild(child1);\n  parent.appendChild(child2);\n  body.appendChild(parent);\n\n  supported = child1.offsetTop !== child2.offsetTop;\n\n  body.fake ? resetFakeBody(body, docOverflow) : parent.remove();\n\n  return supported;\n}\n\nfunction mediaquerySupport () {\n  var doc = document,\n      body = getBody(),\n      docOverflow = setFakeBody(body),\n      div = doc.createElement('div'),\n      style = doc.createElement('style'),\n      rule = '@media all and (min-width:1px){.tns-mq-test{position:absolute}}',\n      position;\n\n  style.type = 'text/css';\n  div.className = 'tns-mq-test';\n\n  body.appendChild(style);\n  body.appendChild(div);\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = rule;\n  } else {\n    style.appendChild(doc.createTextNode(rule));\n  }\n\n  position = window.getComputedStyle ? window.getComputedStyle(div).position : div.currentStyle['position'];\n\n  body.fake ? resetFakeBody(body, docOverflow) : div.remove();\n\n  return position === \"absolute\";\n}\n\n// create and append style sheet\nfunction createStyleSheet (media) {\n  // Create the <style> tag\n  var style = document.createElement(\"style\");\n  // style.setAttribute(\"type\", \"text/css\");\n\n  // Add a media (and/or media query) here if you'd like!\n  // style.setAttribute(\"media\", \"screen\")\n  // style.setAttribute(\"media\", \"only screen and (max-width : 1024px)\")\n  if (media) { style.setAttribute(\"media\", media); }\n\n  // WebKit hack :(\n  // style.appendChild(document.createTextNode(\"\"));\n\n  // Add the <style> element to the page\n  document.querySelector('head').appendChild(style);\n\n  return style.sheet ? style.sheet : style.styleSheet;\n}\n\n// cross browsers addRule method\nfunction addCSSRule(sheet, selector, rules, index) {\n  'insertRule' in sheet ?\n    sheet.insertRule(selector + '{' + rules + '}', index) :\n    sheet.addRule(selector, rules, index);\n}\n\nfunction getCssRulesLength(sheet) {\n  var rule = ('insertRule' in sheet) ? sheet.cssRules : sheet.rules;\n  return rule.length;\n}\n\nfunction toDegree (y, x) {\n  return Math.atan2(y, x) * (180 / Math.PI);\n}\n\nfunction getTouchDirection(angle, range) {\n  var direction = false,\n      gap = Math.abs(90 - Math.abs(angle));\n      \n  if (gap >= 90 - range) {\n    direction = 'horizontal';\n  } else if (gap <= range) {\n    direction = 'vertical';\n  }\n\n  return direction;\n}\n\nfunction hasClass(el, str) {\n  return el.className.indexOf(str) >= 0;\n}\n\nfunction addClass(el, str) {\n  if (!hasClass(el,  str)) {\n    el.className += ' ' + str;\n  }\n}\n\nfunction removeClass(el, str) {\n  if (hasClass(el, str)) {\n    el.className = el.className.replace(str, '');\n  }\n}\n\nfunction hasAttr(el, attr) {\n  return el.hasAttribute(attr);\n}\n\nfunction getAttr(el, attr) {\n  return el.getAttribute(attr);\n}\n\nfunction isNodeList(el) {\n  // Only NodeList has the \"item()\" function\n  return typeof el.item !== \"undefined\"; \n}\n\nfunction setAttrs(els, attrs) {\n  els = (isNodeList(els) || els instanceof Array) ? els : [els];\n  if (Object.prototype.toString.call(attrs) !== '[object Object]') { return; }\n\n  for (var i = els.length; i--;) {\n    for(var key in attrs) {\n      els[i].setAttribute(key, attrs[key]);\n    }\n  }\n}\n\nfunction removeAttrs(els, attrs) {\n  els = (isNodeList(els) || els instanceof Array) ? els : [els];\n  attrs = (attrs instanceof Array) ? attrs : [attrs];\n\n  var attrLength = attrs.length;\n  for (var i = els.length; i--;) {\n    for (var j = attrLength; j--;) {\n      els[i].removeAttribute(attrs[j]);\n    }\n  }\n}\n\nfunction removeElementStyles(el) {\n  el.style.cssText = '';\n}\n\nfunction hideElement(el) {\n  if (!hasAttr(el, 'hidden')) {\n    setAttrs(el, {'hidden': ''});\n  }\n}\n\nfunction showElement(el) {\n  if (hasAttr(el, 'hidden')) {\n    removeAttrs(el, 'hidden');\n  }\n}\n\nfunction isVisible(el) {\n  return el.offsetWidth > 0 && el.offsetHeight > 0;\n}\n\n// check if an image is loaded\n// 1. See if \"naturalWidth\" and \"naturalHeight\" properties are available.\n// 2. See if \"complete\" property is available.\n\nfunction imageLoaded(img) {\n  if (typeof img.complete === 'boolean') {\n    return img.complete;\n  } else if (typeof img.naturalWidth === 'number') {\n    return img.naturalWidth !== 0;\n  }\n}\n\nfunction whichProperty(props){\n  var el = document.createElement('fakeelement'),\n      len = props.length;\n  for(var i = 0; i < props.length; i++){\n    var prop = props[i];\n    if( el.style[prop] !== undefined ){ return prop; }\n  }\n\n  return false; // explicit for ie9-\n}\n\n// get transitionend, animationend based on transitionDuration\n// @propin: string\n// @propOut: string, first-letter uppercase\n// Usage: getEndProperty('WebkitTransitionDuration', 'Transition') => webkitTransitionEnd\nfunction getEndProperty(propIn, propOut) {\n  var endProp = false;\n  if (/^Webkit/.test(propIn)) {\n    endProp = 'webkit' + propOut + 'End';\n  } else if (/^O/.test(propIn)) {\n    endProp = 'o' + propOut + 'End';\n  } else if (propIn) {\n    endProp = propOut.toLowerCase() + 'end';\n  }\n  return endProp;\n}\n\n// Test via a getter in the options object to see if the passive property is accessed\nvar supportsPassive = false;\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function() {\n      supportsPassive = true;\n    }\n  });\n  window.addEventListener(\"test\", null, opts);\n} catch (e) {}\nvar passiveOption = supportsPassive ? { passive: true } : false;\n\nfunction addEvents(el, obj) {\n  for (var prop in obj) {\n    var option = (prop === 'touchstart' || prop === 'touchmove') ? passiveOption : false;\n    el.addEventListener(prop, obj[prop], option);\n  }\n}\n\nfunction removeEvents(el, obj) {\n  for (var prop in obj) {\n    var option = ['touchstart', 'touchmove'].indexOf(prop) >= 0 ? passiveOption : false;\n    el.removeEventListener(prop, obj[prop], option);\n  }\n}\n\nfunction Events() {\n  return {\n    topics: {},\n    on: function (eventName, fn) {\n      this.topics[eventName] = this.topics[eventName] || [];\n      this.topics[eventName].push(fn);\n    },\n    off: function(eventName, fn) {\n      if (this.topics[eventName]) {\n        for (var i = 0; i < this.topics[eventName].length; i++) {\n          if (this.topics[eventName][i] === fn) {\n            this.topics[eventName].splice(i, 1);\n            break;\n          }\n        }\n      }\n    },\n    emit: function (eventName, data) {\n      if (this.topics[eventName]) {\n        this.topics[eventName].forEach(function(fn) {\n          fn(data);\n        });\n      }\n    }\n  };\n}\n\nfunction jsTransform(element, attr, prefix, postfix, to, duration, callback) {\n  var tick = Math.min(duration, 10),\n      unit = (to.indexOf('%') >= 0) ? '%' : 'px',\n      to = to.replace(unit, ''),\n      from = Number(element.style[attr].replace(prefix, '').replace(postfix, '').replace(unit, '')),\n      positionTick = (to - from) / duration * tick,\n      running;\n\n  setTimeout(moveElement, tick);\n  function moveElement() {\n    duration -= tick;\n    from += positionTick;\n    element.style[attr] = prefix + from + unit + postfix;\n    if (duration > 0) { \n      setTimeout(moveElement, tick); \n    } else {\n      callback();\n    }\n  }\n}\n\n// Format: IIFE\n// Version: 2.6.0\n\n// helper functions\n// check browser version and local storage\n// if browser upgraded, \n// 1. delete browser ralated data from local storage and \n// 2. recheck these options and save them to local storage\nvar browserInfo = navigator.userAgent;\nvar localStorageAccess = true;\nvar tnsStorage = {};\n\n// tC => calc\n// tSP => subpixel\n// tMQ => mediaquery\n// tTf => transform\n// tTDu => transitionDuration\n// tTDe => transitionDelay\n// tADu => animationDuration\n// tADe => animationDelay\n// tTE => transitionEnd\n// tAE => animationEnd\ntry {\n  tnsStorage = localStorage;\n  // remove storage when browser version changes\n  if (tnsStorage['tnsApp'] && tnsStorage['tnsApp'] !== browserInfo) {\n    ['tC', 'tSP', 'tMQ', 'tTf', 'tTDu', 'tTDe', 'tADu', 'tADe', 'tTE', 'tAE'].forEach(function (item) {\n      tnsStorage.removeItem(item);\n    })\n  }\n  // update browserInfo\n  tnsStorage['tnsApp'] = browserInfo;\n} catch(e) {\n  localStorageAccess = false;\n}\n\n// reset tnsStorage when localStorage is null (on some versions of Chrome Mobile #134)\n// https://stackoverflow.com/questions/8701015/html-localstorage-is-null-on-android-when-using-webview\nif (!localStorage) { tnsStorage = {}; }\n\n// get browser related data from local storage if they exist\n// otherwise, run the functions again and save these data to local storage\n// checkStorageValue() convert non-string value to its original value: 'true' > true\nvar doc = document;\nvar win = window;\nvar KEYS = {\n      ENTER: 13,\n      SPACE: 32,\n      PAGEUP: 33,\n      PAGEDOWN: 34,\n      END: 35,\n      HOME: 36,\n      LEFT: 37,\n      UP: 38,\n      RIGHT: 39,\n      DOWN: 40\n    };\nvar CALC = checkStorageValue(tnsStorage['tC']) || setLocalStorage('tC', calc(), localStorageAccess);\nvar SUBPIXEL = checkStorageValue(tnsStorage['tSP']) || setLocalStorage('tSP', subpixelLayout(), localStorageAccess);\nvar CSSMQ = checkStorageValue(tnsStorage['tMQ']) || setLocalStorage('tMQ', mediaquerySupport(), localStorageAccess);\nvar TRANSFORM = checkStorageValue(tnsStorage['tTf']) || setLocalStorage('tTf', whichProperty([\n      'transform', \n      'WebkitTransform', \n      'MozTransform', \n      'msTransform', \n      'OTransform'\n    ]), localStorageAccess);\nvar TRANSITIONDURATION = checkStorageValue(tnsStorage['tTDu']) || setLocalStorage('tTDu', whichProperty([\n      'transitionDuration', \n      'WebkitTransitionDuration', \n      'MozTransitionDuration', \n      'OTransitionDuration'\n    ]), localStorageAccess);\nvar TRANSITIONDELAY = checkStorageValue(tnsStorage['tTDe']) || setLocalStorage('tTDe', whichProperty([\n      'transitionDelay', \n      'WebkitTransitionDelay', \n      'MozTransitionDelay', \n      'OTransitionDelay'\n    ]), localStorageAccess);\nvar ANIMATIONDURATION = checkStorageValue(tnsStorage['tADu']) || setLocalStorage('tADu', whichProperty([\n      'animationDuration', \n      'WebkitAnimationDuration', \n      'MozAnimationDuration', \n      'OAnimationDuration'\n    ]), localStorageAccess);\nvar ANIMATIONDELAY = checkStorageValue(tnsStorage['tADe']) || setLocalStorage('tADe', whichProperty([\n      'animationDelay', \n      'WebkitAnimationDelay', \n      'MozAnimationDelay', \n      'OAnimationDelay'\n    ]), localStorageAccess);\nvar TRANSITIONEND = checkStorageValue(tnsStorage['tTE']) || setLocalStorage('tTE', getEndProperty(TRANSITIONDURATION, 'Transition'), localStorageAccess);\nvar ANIMATIONEND = checkStorageValue(tnsStorage['tAE']) || setLocalStorage('tAE', getEndProperty(ANIMATIONDURATION, 'Animation'), localStorageAccess);\n\n// reset SUBPIXEL for IE8\nif (!CSSMQ) { SUBPIXEL = false; }\n\nvar tns = function(options) {\n  options = extend({\n    container: doc.querySelector('.slider'),\n    mode: 'carousel',\n    axis: 'horizontal',\n    items: 1,\n    gutter: 0,\n    edgePadding: 0,\n    fixedWidth: false,\n    slideBy: 1,\n    controls: true,\n    controlsText: ['prev', 'next'],\n    controlsContainer: false,\n    nav: true,\n    navContainer: false,\n    navAsThumbnails: false,\n    arrowKeys: false,\n    speed: 300,\n    autoplay: false,\n    autoplayTimeout: 5000,\n    autoplayDirection: 'forward',\n    autoplayText: ['start', 'stop'],\n    autoplayHoverPause: false,\n    autoplayButton: false,\n    autoplayButtonOutput: true,\n    autoplayResetOnVisibility: true,\n    // animateIn: 'tns-fadeIn',\n    // animateOut: 'tns-fadeOut',\n    // animateNormal: 'tns-normal',\n    // animateDelay: false,\n    loop: true,\n    rewind: false,\n    autoHeight: false,\n    responsive: false,\n    lazyload: false,\n    touch: true,\n    mouseDrag: false,\n    nested: false,\n    freezable: true,\n    // startIndex: 0,\n    onInit: false\n  }, options || {});\n  \n  // get element nodes from selectors\n  ['container', 'controlsContainer', 'navContainer', 'autoplayButton'].forEach(function(item) {\n    if (typeof options[item] === 'string') { options[item] = doc.querySelector(options[item]); }\n  });\n\n  // make sure slide container exists\n  var supportConsoleWarn = win.console && typeof win.console.warn === \"function\";\n  if (!options.container || !options.container.nodeName) {\n    if (supportConsoleWarn) { console.warn('Can\\'t find container element.'); }\n    return;\n  }\n\n  // make sure slides are more than 2\n  if (options.container.children.length < 2) {\n    if (supportConsoleWarn) { console.warn('Slides less than 2.'); }\n    return;\n   }\n\n  // update responsive\n  // from: { \n  //    300: 2, \n  //    800: {\n  //      loop: false\n  //    }\n  // }\n  // to: {\n  //    300: { \n  //      items: 2 \n  //    }, \n  //    800: {\n  //      loop: false\n  //    }\n  // }\n  if (options.responsive) {\n    var resTem = {}, res = options.responsive;\n    for(var key in res) {\n      var val = res[key];\n      resTem[key] = typeof val === 'number' ? {items: val} :  val;\n    }\n\n    options.responsive = resTem;\n    resTem = null;\n\n    // apply responsive[0] to options and remove it\n    if (0 in options.responsive) {\n      options = extend(options, options.responsive[0]);\n      delete options.responsive[0];\n    }\n  }\n\n  // === define and set variables ===\n  var carousel = options.mode === 'carousel' ? true : false;\n\n  if (!carousel) {\n    options.axis = 'horizontal';\n    options.rewind = false;\n    options.loop = true;\n    options.edgePadding = false;\n\n    var animateIn = 'tns-fadeIn',\n        animateOut = 'tns-fadeOut',\n        animateDelay = false,\n        animateNormal = options.animateNormal || 'tns-normal';\n\n    if (TRANSITIONEND && ANIMATIONEND) {\n      animateIn = options.animateIn || animateIn;\n      animateOut = options.animateOut || animateOut;\n      animateDelay = options.animateDelay || animateDelay;\n    }\n  }\n\n  var horizontal = options.axis === 'horizontal' ? true : false,\n      outerWrapper = doc.createElement('div'),\n      innerWrapper = doc.createElement('div'),\n      container = options.container,\n      containerParent = container.parentNode,\n      slideItems = container.children,\n      slideCount = slideItems.length,\n      vpOuter = getViewportWidth(containerParent),\n      vpInner,\n      responsive = options.responsive,\n      responsiveItems = [],\n      breakpoints = false,\n      breakpointZone = 0,\n      windowWidth = getWindowWidth(),\n      isOn;\n\n  if (responsive) {\n    breakpoints = Object.keys(responsive)\n      .map(function (x) { return parseInt(x); })\n      .sort(function (a, b) { return a - b; });\n\n    // get all responsive items\n    breakpoints.forEach(function(bp) {\n      responsiveItems = responsiveItems.concat(Object.keys(responsive[bp]));\n    });\n\n    // remove duplicated items\n    var arr = [];\n    responsiveItems.forEach(function (item) { if (arr.indexOf(item) < 0) { arr.push(item); } });\n    responsiveItems = arr;\n\n    setBreakpointZone();\n  } \n\n  var items = getOption('items'),\n      slideBy = getOption('slideBy') === 'page' ? items : getOption('slideBy'),\n      nested = options.nested,\n      gutter = getOption('gutter'),\n      edgePadding = getOption('edgePadding'),\n      fixedWidth = getOption('fixedWidth'),\n      arrowKeys = getOption('arrowKeys'),\n      speed = getOption('speed'),\n      rewind = options.rewind,\n      loop = rewind ? false : options.loop,\n      autoHeight = getOption('autoHeight'),\n      sheet = createStyleSheet(),\n      lazyload = options.lazyload,\n      slideOffsetTops, // collection of slide offset tops\n      slideItemsOut = [],\n      cloneCount = loop ? slideCount * 2 : 0,\n      slideCountNew = !carousel ? slideCount + cloneCount : slideCount + cloneCount * 2,\n      hasRightDeadZone = fixedWidth && !loop && !edgePadding ? true : false,\n      updateIndexBeforeTransform = !carousel || !loop ? true : false,\n      // transform\n      transformAttr = horizontal ? 'left' : 'top',\n      transformPrefix = '',\n      transformPostfix = '',\n      // index\n      startIndex = getOption('startIndex'),\n      index = startIndex ? updateStartIndex(startIndex) : !carousel ? 0 : cloneCount,\n      indexCached = index,\n      indexMin = 0,\n      indexMax = slideCountNew - items,\n      // resize\n      resizeTimer,\n      touchedOrDraged,\n      running = false,\n      onInit = options.onInit,\n      events = new Events(),\n      // id, class\n      containerIdCached = container.id,\n      classContainer = ' tns-slider tns-' + options.mode,\n      slideId = container.id || getSlideId(),\n      disable = getOption('disable'),\n      freezable = options.freezable,\n      freeze = disable ? true : freezable ? slideCount <= items : false,\n      frozen,\n      importantStr = nested === 'inner' ? ' !important' : '',\n      controlsEvents = {\n        'click': onControlsClick,\n        'keydown': onControlsKeydown\n      },\n      navEvents = {\n        'click': onNavClick,\n        'keydown': onNavKeydown\n      },\n      hoverEvents = {\n        'mouseover': mouseoverPause,\n        'mouseout': mouseoutRestart\n      },\n      visibilityEvent = {'visibilitychange': onVisibilityChange},\n      docmentKeydownEvent = {'keydown': onDocumentKeydown},\n      touchEvents = {\n        'touchstart': onTouchOrMouseStart,\n        'touchmove': onTouchOrMouseMove,\n        'touchend': onTouchOrMouseEnd,\n        'touchcancel': onTouchOrMouseEnd\n      }, dragEvents = {\n        'mousedown': onTouchOrMouseStart,\n        'mousemove': onTouchOrMouseMove,\n        'mouseup': onTouchOrMouseEnd,\n        'mouseleave': onTouchOrMouseEnd\n      },\n      hasControls = checkOption('controls'),\n      hasNav = checkOption('nav'),\n      navAsThumbnails = options.navAsThumbnails,\n      hasAutoplay = checkOption('autoplay'),\n      hasTouch = checkOption('touch'),\n      hasMouseDrag = checkOption('mouseDrag'),\n      slideActiveClass = 'tns-slide-active';\n\n  // check startIndex\n  function updateStartIndex (indexTem) {\n    indexTem = indexTem%slideCount;\n    if (indexTem < 0) { indexTem += slideCount; }\n    indexTem = Math.min(indexTem, slideCountNew - items);\n    return indexTem;\n  }\n\n  // controls\n  if (hasControls) {\n    var controls = getOption('controls'),\n        controlsText = getOption('controlsText'),\n        controlsContainer = options.controlsContainer,\n        prevButton,\n        nextButton,\n        prevIsButton,\n        nextIsButton;\n  }\n\n  // nav\n  if (hasNav) {\n    var nav = getOption('nav'),\n        navContainer = options.navContainer,\n        navItems,\n        visibleNavIndexes = [],\n        visibleNavIndexesCached = visibleNavIndexes,\n        navClicked = -1,\n        navCurrentIndex = index%slideCount,\n        navCurrentIndexCached = navCurrentIndex,\n        navActiveClass = 'tns-nav-active';\n  }\n\n  // autoplay\n  if (hasAutoplay) {\n    var autoplay = getOption('autoplay'),\n        autoplayTimeout = getOption('autoplayTimeout'),\n        autoplayDirection = options.autoplayDirection === 'forward' ? 1 : -1,\n        autoplayText = getOption('autoplayText'),\n        autoplayHoverPause = getOption('autoplayHoverPause'),\n        autoplayButton = options.autoplayButton,\n        autoplayResetOnVisibility = getOption('autoplayResetOnVisibility'),\n        autoplayHtmlStrings = ['<span class=\\'tns-visually-hidden\\'>', ' animation</span>'],\n        autoplayTimer,\n        animating,\n        autoplayHoverPaused,\n        autoplayUserPaused,\n        autoplayVisibilityPaused;\n  }\n\n  // touch\n  if (hasTouch) {\n    var touch = getOption('touch'),\n        startX = null,\n        startY = null,\n        translateInit,\n        moveDirectionExpected = 0,\n        disX,\n        disY;\n  }\n\n  // mouse drag\n  if (hasMouseDrag) {\n    var mouseDrag = getOption('mouseDrag'),\n        isDragEvent = false;\n  }\n\n  // disable slider when slidecount <= items\n  if (freeze) {\n    controls = nav = touch = mouseDrag = arrowKeys = autoplay = autoplayHoverPause = autoplayResetOnVisibility = false;\n  }\n\n  if (TRANSFORM) {\n    transformAttr = TRANSFORM;\n    transformPrefix = 'translate';\n    transformPrefix += horizontal ? 'X(' : 'Y(';\n    transformPostfix = ')';\n  }\n\n  // === COMMON FUNCTIONS === //\n  function getWindowWidth () {\n    return win.innerWidth || doc.documentElement.clientWidth || doc.body.clientWidth;\n  }\n\n  function getViewportWidth (el) {\n    var width;\n\n    do {\n      width = el.clientWidth;\n      el = el.parentNode;\n    } while (!width);\n\n    return width;\n  }\n\n  function checkOption (item) {\n    var result = options[item];\n    if (!result && breakpoints && responsiveItems.indexOf(item) >= 0) {\n      breakpoints.forEach(function (bp) {\n        if (responsive[bp][item]) { result = true; }\n      });\n    }\n    return result;\n  }\n\n  function getOption (item, viewport) {\n    viewport = viewport ? viewport : windowWidth;\n    \n    var obj = {\n          slideBy: 'page',\n          edgePadding: false,\n          autoHeight: true\n        },\n        result;\n\n    if (!carousel && item in obj) {\n      result = obj[item];\n    } else {\n      if (item === 'items' && getOption('fixedWidth')) {\n        result = Math.floor(vpOuter / (getOption('fixedWidth') + getOption('gutter')));\n      } else if (item === 'autoHeight' && nested === 'outer') {\n        result = true;\n      } else {\n        result = options[item];\n\n        if (breakpoints && responsiveItems.indexOf(item) >= 0) {\n          for (var i = 0, len = breakpoints.length; i < len; i++) {\n            var bp = breakpoints[i];\n            if (viewport >= bp) {\n              if (item in responsive[bp]) { result = responsive[bp][item]; }\n            } else { break; }\n          }\n        }\n      }\n    }\n\n\n    if (item === 'slideBy' && result === 'page') { result = getOption('items'); }\n\n    return result;\n  }\n\n  function getSlideMarginLeft (i) {\n    var str = CALC ? \n      CALC + '(' + i * 100 + '% / ' + slideCountNew + ')' : \n      i * 100 / slideCountNew + '%';\n    return str;\n  }\n\n  function getInnerWrapperStyles (edgePaddingTem, gutterTem, fixedWidthTem) {\n    var str = '';\n    if (edgePaddingTem) {\n      var gap = edgePaddingTem;\n      if (gutterTem) { gap += gutterTem; }\n      if (fixedWidthTem) {\n        str = 'margin: 0px ' + (vpOuter%(fixedWidthTem + gutterTem) + gutterTem) / 2 + 'px';\n      } else {\n        str = horizontal ?\n          'margin: 0 ' + edgePaddingTem + 'px 0 ' + gap + 'px;' :\n          'padding: ' + gap + 'px 0 ' + edgePaddingTem + 'px 0;';\n      }\n    } else if (gutterTem && !fixedWidthTem) {\n      var gutterTemUnit = '-' + gutterTem + 'px',\n          dir = horizontal ? gutterTemUnit + ' 0 0' : '0 ' + gutterTemUnit + ' 0';\n      str = 'margin: 0 ' + dir + ';';\n    }\n\n    return str;\n  }\n\n  function getContainerWidth (fixedWidthTem, gutterTem, itemsTem) {\n    var str;\n\n    if (fixedWidthTem) {\n      str = (fixedWidthTem + gutterTem) * slideCountNew + 'px';\n    } else {\n      str = CALC ? \n        CALC + '(' + slideCountNew * 100 + '% / ' + itemsTem + ')' : \n        slideCountNew * 100 / itemsTem + '%';\n    }\n\n    return str;\n  }\n\n  function getSlideWidthStyle (fixedWidthTem, gutterTem, itemsTem) {\n    var str = '';\n\n    if (horizontal) {\n      str = 'width:';\n      if (fixedWidthTem) {\n        str += (fixedWidthTem + gutterTem) + 'px';\n      } else {\n        var dividend = carousel ? slideCountNew : itemsTem;\n        str += CALC ? \n          CALC + '(100% / ' + dividend + ')' : \n          100 / dividend + '%';\n      }\n      str += importantStr + ';';\n    }\n\n    return str;\n  }\n\n  function getSlideGutterStyle (gutterTem) {\n    var str = '';\n\n    // gutter maybe interger || 0\n    // so can't use 'if (gutter)'\n    if (gutterTem !== false) {\n      var prop = horizontal ? 'padding-' : 'margin-',\n          dir = horizontal ? 'right' : 'bottom';\n      str = prop +  dir + ': ' + gutterTem + 'px;';\n    }\n\n    return str;\n  }\n\n  (function sliderInit () {\n    // First thing first, wrap container with 'outerWrapper > innerWrapper',\n    // to get the correct view width\n    outerWrapper.appendChild(innerWrapper);\n    containerParent.insertBefore(outerWrapper, container);\n    innerWrapper.appendChild(container);\n    vpInner = getViewportWidth(innerWrapper);\n\n    var classOuter = 'tns-outer',\n        classInner = 'tns-inner',\n        hasGutter = checkOption('gutter');\n\n    if (carousel) {\n      if (horizontal) {\n        if (checkOption('edgePadding') || hasGutter && !options.fixedWidth) {\n          classOuter += ' tns-ovh';\n        } else {\n          classInner += ' tns-ovh';\n        }\n      } else {\n        classInner += ' tns-ovh';\n      }\n    } else if (hasGutter) {\n      classOuter += ' tns-ovh';\n    }\n\n    outerWrapper.className = classOuter;\n    innerWrapper.className = classInner;\n    innerWrapper.id = slideId + '-iw';\n    if (autoHeight) {\n      innerWrapper.className += ' tns-ah';\n      innerWrapper.style[TRANSITIONDURATION] = speed / 1000 + 's';\n    }\n\n    // set container properties\n    if (container.id === '') { container.id = slideId; }\n    classContainer += SUBPIXEL ? ' tns-subpixel' : ' tns-no-subpixel';\n    classContainer += CALC ? ' tns-calc' : ' tns-no-calc';\n    if (carousel) { classContainer += ' tns-' + options.axis; }\n    container.className += classContainer;\n    // add event\n    if (carousel && TRANSITIONEND) {\n      var eve = {};\n      eve[TRANSITIONEND] = onTransitionEnd;\n      addEvents(container, eve);\n    }\n\n    // delete datas after init\n    classOuter = classInner = null;\n\n    // add id, class, aria attributes \n    // before clone slides\n    for (var x = 0; x < slideCount; x++) {\n      var item = slideItems[x];\n      if (!item.id) { item.id = slideId + '-item' + x; }\n      addClass(item, 'tns-item');\n      if (!carousel && animateNormal) { addClass(item, animateNormal); }\n      setAttrs(item, {\n        'aria-hidden': 'true',\n        'tabindex': '-1'\n      });\n    }\n\n    // clone slides\n    if (loop || edgePadding) {\n      var fragmentBefore = doc.createDocumentFragment(), \n          fragmentAfter = doc.createDocumentFragment();\n\n      for (var j = cloneCount; j--;) {\n        var num = j%slideCount,\n            cloneFirst = slideItems[num].cloneNode(true);\n        removeAttrs(cloneFirst, 'id');\n        fragmentAfter.insertBefore(cloneFirst, fragmentAfter.firstChild);\n\n        if (carousel) {\n          var cloneLast = slideItems[slideCount - 1 - num].cloneNode(true);\n          removeAttrs(cloneLast, 'id');\n          fragmentBefore.appendChild(cloneLast);\n        }\n      }\n\n      container.insertBefore(fragmentBefore, container.firstChild);\n      container.appendChild(fragmentAfter);\n      slideItems = container.children;\n    }\n\n    // activate visible slides\n    // add aria attrs\n    // set animation classes and left value for gallery slider\n    // use slide count when slides are fewer than items\n    for (var i = index, l = index + Math.min(slideCount, items); i < l; i++) {\n      var item = slideItems[i];\n      setAttrs(item, {'aria-hidden': 'false'});\n      removeAttrs(item, ['tabindex']);\n      addClass(item, slideActiveClass);\n\n      if (!carousel) { \n        item.style.left = (i - index) * 100 / items + '%';\n        addClass(item, animateIn);\n        removeClass(item, animateNormal);\n      }\n    }\n\n    if (carousel && horizontal) {\n      // set font-size rules\n      // for modern browsers\n      if (SUBPIXEL) {\n        // set slides font-size first\n        addCSSRule(sheet, '#' + slideId + ' > .tns-item', 'font-size:' + win.getComputedStyle(slideItems[0]).fontSize + ';', getCssRulesLength(sheet));\n        addCSSRule(sheet, '#' + slideId, 'font-size:0;', getCssRulesLength(sheet));\n\n      // slide left margin\n      // for IE8 & webkit browsers (no subpixel)\n      } else {\n        [].forEach.call(slideItems, function (slide, i) {\n          slide.style.marginLeft = getSlideMarginLeft(i);\n        });\n      }\n    }\n\n    if (CSSMQ) {\n      // inner wrapper styles\n      var str = getInnerWrapperStyles(options.edgePadding, options.gutter, options.fixedWidth);\n      addCSSRule(sheet, '#' + slideId + '-iw', str, getCssRulesLength(sheet));\n\n      // container styles\n      if (carousel && horizontal) {\n        str = 'width:' + getContainerWidth(options.fixedWidth, options.gutter, options.items);\n        addCSSRule(sheet, '#' + slideId, str, getCssRulesLength(sheet));\n      }\n\n      // slide styles\n      if (horizontal || options.gutter) {\n        str = getSlideWidthStyle(options.fixedWidth, options.gutter, options.items) + \n              getSlideGutterStyle(options.gutter);\n        addCSSRule(sheet, '#' + slideId + ' > .tns-item', str, getCssRulesLength(sheet));\n      }\n\n    // non CSS mediaqueries: IE8\n    // ## update inner wrapper, container, slides if needed\n    // set inline styles for inner wrapper & container\n    // insert stylesheet (one line) for slides only (since slides are many)\n    } else {\n      // inner wrapper styles\n      innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth);\n\n      // container styles\n      if (carousel && horizontal) {\n        container.style.width = getContainerWidth(fixedWidth, gutter, items);\n      }\n\n      // slide styles\n      if (horizontal || gutter) {\n        var str = getSlideWidthStyle(fixedWidth, gutter, items) +\n                  getSlideGutterStyle(gutter);\n        // append to the last line\n        addCSSRule(sheet, '#' + slideId + ' > .tns-item', str, getCssRulesLength(sheet));\n      }\n    }\n\n    if (!horizontal && !disable) {\n      getSlideOffsetTops();\n      updateContentWrapperHeight();\n    }\n\n    // media queries\n    if (responsive && CSSMQ) {\n      breakpoints.forEach(function(bp) {\n        var opts = responsive[bp],\n            str = '',\n            innerWrapperStr = '',\n            containerStr = '',\n            slideStr = '',\n            itemsBP = getOption('items', bp),\n            fixedWidthBP = getOption('fixedWidth', bp),\n            edgePaddingBP = getOption('edgePadding', bp),\n            gutterBP = getOption('gutter', bp);\n\n        // inner wrapper string\n        if ('edgePadding' in opts || 'gutter' in opts) {\n          innerWrapperStr = '#' + slideId + '-iw{' + getInnerWrapperStyles(edgePaddingBP, gutterBP, fixedWidthBP) + '}';\n        }\n\n        // container string\n        if (carousel && horizontal && ('fixedWidth' in opts || 'gutter' in opts || 'items' in opts)) {\n          containerStr = '#' + slideId + '{' + 'width:' + getContainerWidth(fixedWidthBP, gutterBP, itemsBP) + '}';\n        }\n\n        // slide string\n        if ('fixedWidth' in opts || checkOption('fixedWidth') && 'gutter' in opts || !carousel && 'items' in opts) {\n          slideStr += getSlideWidthStyle(fixedWidthBP, gutterBP, itemsBP);\n        }\n        if ('gutter' in opts) {\n          slideStr += getSlideGutterStyle(gutterBP);\n        }\n        if (slideStr.length > 0) { slideStr = '#' + slideId + ' > .tns-item{' + slideStr + '}'; }\n\n        str = innerWrapperStr + containerStr + slideStr;\n\n        if (str.length > 0) {\n          sheet.insertRule('@media (min-width: ' + bp / 16 + 'em) {' + str + '}', sheet.cssRules.length);\n        }\n      });\n    }\n\n\n    // set container transform property\n    if (carousel && !disable) {\n      doContainerTransform();\n    }\n\n\n    // == msInit ==\n    // for IE10\n    if (navigator.msMaxTouchPoints) {\n      addClass(outerWrapper, 'ms-touch');\n      addEvents(outerWrapper, {'scroll': ie10Scroll});\n      setSnapInterval();\n    }\n\n \n    // == navInit ==\n    if (hasNav) {\n      var initIndex = !carousel ? 0 : cloneCount;\n      // customized nav\n      // will not hide the navs in case they're thumbnails\n      if (navContainer) {\n        setAttrs(navContainer, {'aria-label': 'Carousel Pagination'});\n        navItems = navContainer.children;\n        [].forEach.call(navItems, function (item, i) {\n          setAttrs(item, {\n            'data-nav': i,\n            'tabindex': '-1',\n            'aria-selected': 'false',\n            'aria-controls': slideItems[initIndex + i].id,\n          });\n        });\n\n      // generated nav \n      } else {\n        var navHtml = '',\n            hiddenStr = navAsThumbnails ? '' : ' hidden';\n        for (var i = 0; i < slideCount; i++) {\n          // hide nav items by default\n          navHtml += '<button data-nav=\"' + i +'\" tabindex=\"-1\" aria-selected=\"false\" aria-controls=\"' + slideItems[initIndex + i].id + hiddenStr + '\" type=\"button\"></button>';\n        }\n        navHtml = '<div class=\"tns-nav\" aria-label=\"Carousel Pagination\">' + navHtml + '</div>';\n        outerWrapper.insertAdjacentHTML('afterbegin', navHtml);\n\n        navContainer = outerWrapper.querySelector('.tns-nav');\n        navItems = navContainer.children;\n\n      }\n\n      updateNavVisibility();\n\n      // add transition\n      if (TRANSITIONDURATION) {\n        var prefix = TRANSITIONDURATION.substring(0, TRANSITIONDURATION.length - 18).toLowerCase(),\n            str = 'transition: all ' + speed / 1000 + 's';\n\n        if (prefix) {\n          str = '-' + prefix + '-' + str;\n        }\n\n        addCSSRule(sheet, '[aria-controls^=' + slideId + '-item]', str, getCssRulesLength(sheet));\n      }\n\n      setAttrs(navItems[navCurrentIndex], {'tabindex': '0', 'aria-selected': 'true'});\n      addClass(navItems[navCurrentIndex], navActiveClass);\n\n      // add events\n      addEvents(navContainer, navEvents);\n\n      if (!nav) { hideElement(navContainer); }\n    }\n\n\n    // == autoplayInit ==\n    if (hasAutoplay) {\n      var txt = autoplay ? 'stop' : 'start';\n      if (autoplayButton) {\n        setAttrs(autoplayButton, {'data-action': txt});\n      } else if (options.autoplayButtonOutput) {\n        innerWrapper.insertAdjacentHTML('beforebegin', '<button data-action=\"' + txt + '\" type=\"button\">' + autoplayHtmlStrings[0] + txt + autoplayHtmlStrings[1] + autoplayText[0] + '</button>');\n        autoplayButton = outerWrapper.querySelector('[data-action]');\n      }\n\n      // add event\n      if (autoplayButton) {\n        addEvents(autoplayButton, {'click': toggleAutoplay});\n      }\n\n      if (!autoplay) {\n        if (autoplayButton) {\n          hideElement(autoplayButton);\n        }\n      } else {\n        startAutoplay();\n        if (autoplayHoverPause) { addEvents(container, hoverEvents); }\n        if (autoplayResetOnVisibility) { addEvents(container, visibilityEvent); }\n      }\n    }\n\n\n    // == controlsInit ==\n    if (hasControls) {\n      if (controlsContainer) {\n        prevButton = controlsContainer.children[0];\n        nextButton = controlsContainer.children[1];\n        setAttrs(controlsContainer, {\n          'aria-label': 'Carousel Navigation',\n          'tabindex': '0'\n        });\n        setAttrs(prevButton, {'data-controls' : 'prev'});\n        setAttrs(nextButton, {'data-controls' : 'next'});\n        setAttrs(controlsContainer.children, {\n          'aria-controls': slideId,\n          'tabindex': '-1',\n        });\n      } else {\n        outerWrapper.insertAdjacentHTML('afterbegin', '<div class=\"tns-controls\" aria-label=\"Carousel Navigation\" tabindex=\"0\"><button data-controls=\"prev\" tabindex=\"-1\" aria-controls=\"' + slideId +'\" type=\"button\">' + controlsText[0] + '</button><button data-controls=\"next\" tabindex=\"-1\" aria-controls=\"' + slideId +'\" type=\"button\">' + controlsText[1] + '</button></div>');\n\n        controlsContainer = outerWrapper.querySelector('.tns-controls');\n        prevButton = controlsContainer.children[0];\n        nextButton = controlsContainer.children[1];\n      }\n\n      prevIsButton = isButton(prevButton);\n      nextIsButton = isButton(nextButton);\n\n      updateControlsStatus();\n\n      // add events\n      addEvents(controlsContainer, controlsEvents);\n\n      if (!controls) { hideElement(controlsContainer); }\n    }\n\n\n    if (touch) { addEvents(container, touchEvents); }\n    if (mouseDrag) { addEvents(container, dragEvents); }\n    if (arrowKeys) { addEvents(doc, docmentKeydownEvent); }\n\n\n    if (nested === 'inner') {\n      events.on('outerResized', function () {\n        resizeTasks();\n        events.emit('innerLoaded', info());\n      });\n    } else {\n      addEvents(win, {'resize': onResize});\n      if (nested === 'outer') {\n        events.on('innerLoaded', runAutoHeight);\n      }\n    }\n\n    lazyLoad();\n    runAutoHeight();\n    toggleSlideDisplayAndEdgePadding();\n    updateFixedWidthInnerWrapperStyle();\n\n    events.on('indexChanged', additionalUpdates);\n\n    if (typeof onInit === 'function') { onInit(info()); }\n    if (nested === 'inner') { events.emit('innerLoaded', info()); }\n\n    if (disable) { disableSlider(true); }\n\n    isOn = true;\n  })();\n\n\n\n\n\n// === ON RESIZE ===\n  function onResize (e) {\n    e = e || win.event;\n\n    clearTimeout(resizeTimer);\n    resizeTimer = setTimeout(function () {\n      if (isOn) {\n        var newWW = getWindowWidth();\n        if (windowWidth !== newWW) {\n          windowWidth = newWW;\n\n          resizeTasks();\n\n          if (nested === 'outer') { events.emit('outerResized', info(e)); }\n        }\n      }\n    }, 100); // update after stop resizing for 100 ms\n  }\n\n  function resizeTasks () {\n    var breakpointZoneTem = breakpointZone,\n        indexTem = index, \n        itemsTem = items,\n        freezeTem = freeze;\n\n    vpOuter = getViewportWidth(outerWrapper);\n    vpInner = getViewportWidth(innerWrapper);\n    if (breakpoints) { setBreakpointZone(); }\n\n\n    // things do when breakpoint zone change\n    if (breakpointZoneTem !== breakpointZone || fixedWidth) {\n      var slideByTem = slideBy,\n          arrowKeysTem = arrowKeys,\n          autoHeightTem = autoHeight,\n          fixedWidthTem = fixedWidth,\n          edgePaddingTem = edgePadding,\n          gutterTem = gutter,\n          disableTem = disable;\n\n      // update variables\n      items = getOption('items');\n      slideBy = getOption('slideBy');\n      disable = getOption('disable');\n      freeze = disable ? true : freezable ? slideCount <= items : false;\n\n      if (items !== itemsTem) {\n        indexMax = slideCountNew - items;\n        // check index before transform in case\n        // slider reach the right edge then items become bigger\n        updateIndex();\n      }\n\n      if (disable !== disableTem) {\n        disableSlider(disable);\n      }\n      \n      if (freeze !== freezeTem) {\n        // reset index to initial status\n        if (freeze) { index = !carousel ? 0 : cloneCount; }\n\n        toggleSlideDisplayAndEdgePadding();\n      }\n      \n      if (breakpointZoneTem !== breakpointZone) {\n        speed = getOption('speed');\n        edgePadding = getOption('edgePadding');\n        gutter = getOption('gutter');\n\n        fixedWidth = getOption('fixedWidth');\n        if (!disable && fixedWidth !== fixedWidthTem) {\n          doContainerTransform();\n        }\n\n        autoHeight = getOption('autoHeight');\n        if (autoHeight !== autoHeightTem) {\n          if (!autoHeight) { innerWrapper.style.height = ''; }\n        }\n      }\n\n      arrowKeys = freeze ? false : getOption('arrowKeys');\n      if (arrowKeys !== arrowKeysTem) {\n        arrowKeys ?\n          addEvents(doc, docmentKeydownEvent) :\n          removeEvents(doc, docmentKeydownEvent);\n      }\n\n      if (hasControls) {\n        var controlsTem = controls,\n            controlsTextTem = controlsText;\n        controls = freeze ? false : getOption('controls');\n        controlsText = getOption('controlsText');\n\n        if (controls !== controlsTem) {\n          controls ?\n            showElement(controlsContainer) :\n            hideElement(controlsContainer); \n        }\n        if (controlsText !== controlsTextTem) {\n          prevButton.innerHTML = controlsText[0];\n          nextButton.innerHTML = controlsText[1];\n        }\n      }\n      if (hasNav) {\n        var navTem = nav;\n        nav = freeze ? false : getOption('nav');\n\n        if (nav !== navTem) {\n          if (nav) {\n            showElement(navContainer);\n            updateNavVisibility();\n          } else {\n            hideElement(navContainer);\n          }\n        }\n      }\n      if (hasTouch) {\n        var touchTem = touch;\n        touch = freeze ? false : getOption('touch');\n\n        if (touch !== touchTem && carousel) {\n          touch ?\n            addEvents(container, touchEvents) :\n            removeEvents(container, touchEvents);\n        }\n      }\n      if (hasMouseDrag) {\n        var mouseDragTem = mouseDrag;\n        mouseDrag = freeze ? false : getOption('mouseDrag');\n\n        if (mouseDrag !== mouseDragTem && carousel) {\n          mouseDrag ?\n            addEvents(container, dragEvents) :\n            removeEvents(container, dragEvents);\n        }\n      }\n      if (hasAutoplay) {\n        var autoplayTem = autoplay,\n            autoplayHoverPauseTem = autoplayHoverPause,\n            autoplayResetOnVisibilityTem = autoplayResetOnVisibility,\n            autoplayTextTem = autoplayText;\n\n        if (freeze) {\n          autoplay = autoplayHoverPause = autoplayResetOnVisibility = false;\n        } else {\n          autoplay = getOption('autoplay');\n          \n          if (autoplay) {\n            autoplayHoverPause = getOption('autoplayHoverPause');\n            autoplayResetOnVisibility = getOption('autoplayResetOnVisibility');\n          } else {\n            autoplayHoverPause = autoplayResetOnVisibility = false;\n          }\n        }\n        autoplayText = getOption('autoplayText');\n        autoplayTimeout = getOption('autoplayTimeout');\n\n        if (autoplay !== autoplayTem) {\n          if (autoplay) {\n            if (autoplayButton) { showElement(autoplayButton); }\n            if (!animating && !autoplayUserPaused) { startAutoplay(); }\n          } else {\n            if (autoplayButton) { hideElement(autoplayButton); }\n            if (animating) { stopAutoplay(); }\n          }\n        }\n        if (autoplayHoverPause !== autoplayHoverPauseTem) {\n          autoplayHoverPause ?\n            addEvents(container, hoverEvents) :\n            removeEvents(container, hoverEvents);\n        }\n        if (autoplayResetOnVisibility !== autoplayResetOnVisibilityTem) {\n          autoplayResetOnVisibility ?\n            addEvents(doc, visibilityEvent) :\n            removeEvents(doc, visibilityEvent);\n        }\n        if (autoplayButton && autoplayText !== autoplayTextTem) {\n          var i = autoplay ? 1 : 0,\n              html = autoplayButton.innerHTML,\n              len = html.length - autoplayTextTem[i].length;\n          if (html.substring(len) === autoplayTextTem[i]) {\n            autoplayButton.innerHTML = html.substring(0, len) + autoplayText[i];\n          }\n        }\n      }\n\n      // IE8\n      // ## update inner wrapper, container, slides if needed\n      // set inline styles for inner wrapper & container\n      // insert stylesheet (one line) for slides only (since slides are many)\n      if (!CSSMQ) {\n        // inner wrapper styles\n        if (!freeze && (edgePadding !== edgePaddingTem || gutter !== gutterTem)) {\n          innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth);\n        }\n\n        // container styles\n        if (carousel && horizontal && (fixedWidth !== fixedWidthTem || gutter !== gutterTem || items !== itemsTem)) {\n          container.style.width = getContainerWidth(fixedWidth, gutter, items);\n        }\n\n        // slide styles\n        if (horizontal && (items !== itemsTem || gutter !== gutterTem || fixedWidth != fixedWidthTem)) {\n          var str = getSlideWidthStyle(fixedWidth, gutter, items) + \n                    getSlideGutterStyle(gutter);\n\n          // remove the last line and\n          // add new styles\n          sheet.removeRule(getCssRulesLength(sheet) - 1);\n          addCSSRule(sheet, '#' + slideId + ' > .tns-item', str, getCssRulesLength(sheet));\n        }\n\n        // will do transform later if index !== indexTem\n        // make sure doTransform will only run once\n        if (!fixedWidth && index === indexTem) { doTransform(0); }\n      }\n\n      if (index !== indexTem) { \n        events.emit('indexChanged', info());\n        doTransform(0); \n        indexCached = index;\n      }\n\n      if (items !== itemsTem) { \n        additionalUpdates();\n        updateSlidePosition();\n        runAutoHeight();\n\n        if (navigator.msMaxTouchPoints) { setSnapInterval(); }\n      }\n    }\n\n    // things always do regardless of breakpoint zone changing\n    if (!horizontal && !disable) {\n      getSlideOffsetTops();\n      updateContentWrapperHeight();\n      doContainerTransform();\n    }\n\n    updateFixedWidthInnerWrapperStyle(true);\n\n    // auto height\n    runAutoHeight();\n  }\n\n\n\n\n\n  // === INITIALIZATION FUNCTIONS === //\n  function setBreakpointZone () {\n    breakpointZone = 0;\n    breakpoints.forEach(function(bp, i) {\n      if (windowWidth >= bp) { breakpointZone = i + 1; }\n    });\n  }\n\n  // (slideBy, indexMin, indexMax) => index\n  var updateIndex = (function () {\n    return loop ? \n      function () {\n        var leftEdge = indexMin,\n            rightEdge = indexMax;\n\n        if (carousel) {\n          leftEdge += slideBy;\n          rightEdge -= slideBy;\n\n          // adjust edges when edge padding is true\n          // or fixed-width slider with extra space on the right side\n          if (edgePadding) {\n            leftEdge += 1;\n            rightEdge -= 1;\n          } else if (fixedWidth) {\n            var gt = gutter ? gutter : 0;\n            if (vpOuter%(fixedWidth + gt) > gt) { rightEdge -= 1; }\n          }\n        }\n\n        if (index > rightEdge) {\n          while(index >= leftEdge + slideCount) { index -= slideCount; }\n        } else if(index < leftEdge) {\n          while(index <= rightEdge - slideCount) { index += slideCount; }\n        }\n      } :\n      function () { index = Math.max(indexMin, Math.min(indexMax, index)); };\n  })();\n\n  function toggleSlideDisplayAndEdgePadding () {\n    // if (cloneCount) {\n    // if (fixedWidth && cloneCount) {\n      var str = 'tns-transparent';\n\n      if (freeze) {\n        if (!frozen) {\n          // remove edge padding from inner wrapper\n          if (edgePadding) { innerWrapper.style.margin = '0px'; }\n\n          // add class tns-transparent to cloned slides\n          if (cloneCount) {\n            for (var i = cloneCount; i--;) {\n              if (carousel) { addClass(slideItems[i], str); }\n              addClass(slideItems[slideCountNew - i - 1], str);\n            }\n          }\n\n          frozen = true;\n        }\n      } else if (frozen) {\n        // restore edge padding for inner wrapper\n        // for mordern browsers\n        if (edgePadding && !fixedWidth && CSSMQ) { innerWrapper.style.margin = ''; }\n\n        // remove class tns-transparent to cloned slides\n        if (cloneCount) {\n          for (var i = cloneCount; i--;) {\n            if (carousel) { removeClass(slideItems[i], str); }\n            removeClass(slideItems[slideCountNew - i - 1], str);\n          }\n        }\n\n        frozen = false;\n      }\n    // }\n  }\n\n  function updateFixedWidthInnerWrapperStyle (resize) {\n    if (fixedWidth && edgePadding) {\n      // remove edge padding when freeze or viewport narrower than one slide\n      if (freeze || vpOuter <= (fixedWidth + gutter)) {\n        if (innerWrapper.style.margin !== '0px') { innerWrapper.style.margin = '0px'; }\n      // update edge padding on resize\n      } else if (resize) {\n        innerWrapper.style.cssText = getInnerWrapperStyles(edgePadding, gutter, fixedWidth);\n      }\n    }\n  }\n\n  function disableSlider (disable) {\n    var len = slideItems.length;\n    \n    if (disable) {\n      sheet.disabled = true;\n      container.className = container.className.replace(classContainer.substring(1), '');\n      removeElementStyles(container);\n      if (loop) {\n        for (var j = cloneCount; j--;) {\n          if (carousel) { hideElement(slideItems[j]); }\n          hideElement(slideItems[len - j - 1]);\n        }\n      }\n\n      // vertical slider\n      if (!horizontal || !carousel) { removeElementStyles(innerWrapper); }\n\n      // gallery\n      if (!carousel) { \n        for (var i = index, l = index + slideCount; i < l; i++) {\n          var item = slideItems[i];\n          removeElementStyles(item);\n          removeClass(item, animateIn);\n          removeClass(item, animateNormal);\n        }\n      }\n    } else {\n      sheet.disabled = false;\n      container.className += classContainer;\n\n      // vertical slider: get offsetTops before container transform\n      if (!horizontal) { getSlideOffsetTops(); }\n\n      doContainerTransform();\n      if (loop) {\n        for (var j = cloneCount; j--;) {\n          if (carousel) { showElement(slideItems[j]); }\n          showElement(slideItems[len - j - 1]);\n        }\n      }\n\n      // gallery\n      if (!carousel) { \n        for (var i = index, l = index + slideCount; i < l; i++) {\n          var item = slideItems[i],\n              classN = i < index + items ? animateIn : animateNormal;\n          item.style.left = (i - index) * 100 / items + '%';\n          addClass(item, classN);\n        }\n      }\n    }\n  }\n\n  // lazyload\n  function lazyLoad () {\n    if (lazyload && !disable) {\n      var i = index, \n          len = index + items;\n          \n      if (edgePadding) {\n        i -=1;\n        len +=1;\n      }\n\n      for(; i < len; i++) {\n        [].forEach.call(slideItems[i].querySelectorAll('.tns-lazy-img'), function (img) {\n          // stop propagationl transitionend event to container\n          var eve = {};\n          eve[TRANSITIONEND] = function (e) { e.stopPropagation(); };\n          addEvents(img, eve);\n\n          if (!hasClass(img, 'loaded')) {\n            img.src = getAttr(img, 'data-src');\n            addClass(img, 'loaded');\n          }\n        });\n      }\n    }\n  }\n\n  // check if all visible images are loaded\n  // and update container height if it's done\n  function runAutoHeight () {\n    if (autoHeight && !disable) {\n      // get all images inside visible slide items\n      var images = [];\n\n      for (var i = index, l = index + items; i < l; i++) {\n        [].forEach.call(slideItems[i].querySelectorAll('img'), function (img) {\n          images.push(img);\n        });\n      }\n\n      if (images.length === 0) {\n        updateInnerWrapperHeight(); \n      } else {\n        checkImagesLoaded(images);\n      }\n    }\n  }\n\n  function checkImagesLoaded (images) {\n    images.forEach(function (img, index) {\n      if (imageLoaded(img)) { images.splice(index, 1); }\n    });\n\n    if (images.length === 0) {\n      updateInnerWrapperHeight();\n    } else {\n      setTimeout(function () { \n        checkImagesLoaded(images); \n      }, 16);\n    }\n  } \n\n  function additionalUpdates () {\n    lazyLoad(); \n    updateSlideStatus();\n    updateControlsStatus();\n    updateNavVisibility();\n    updateNavStatus();\n  }\n\n\n  // update inner wrapper height\n  // 1. get the max-height of the visible slides\n  // 2. set transitionDuration to speed\n  // 3. update inner wrapper height to max-height\n  // 4. set transitionDuration to 0s after transition done\n  function updateInnerWrapperHeight () {\n    var heights = [], maxHeight;\n    for (var i = index, l = index + items; i < l; i++) {\n      heights.push(slideItems[i].offsetHeight);\n    }\n    maxHeight = Math.max.apply(null, heights);\n\n    if (innerWrapper.style.height !== maxHeight) {\n      if (TRANSITIONDURATION) { setDurations(speed); }\n      innerWrapper.style.height = maxHeight + 'px';\n    }\n  }\n\n  // get the distance from the top edge of the first slide to each slide\n  // (init) => slideOffsetTops\n  function getSlideOffsetTops () {\n    slideOffsetTops = [0];\n    var topFirst = slideItems[0].getBoundingClientRect().top, attr;\n    for (var i = 1; i < slideCountNew; i++) {\n      attr = slideItems[i].getBoundingClientRect().top;\n      slideOffsetTops.push(attr - topFirst);\n    }\n  }\n\n  // set snapInterval (for IE10)\n  function setSnapInterval () {\n    outerWrapper.style.msScrollSnapPointsX = 'snapInterval(0%, ' + (100 / items) + '%)';\n  }\n\n  // update slide\n  function updateSlideStatus () {\n    var l = index + Math.min(slideCount, items);\n    for (var i = slideCountNew; i--;) {\n      var item = slideItems[i];\n      \n      // visible slides\n      if (i >= index && i < l) {\n        if (hasAttr(item, 'tabindex')) {\n          setAttrs(item, {'aria-hidden': 'false'});\n          removeAttrs(item, ['tabindex']);\n          addClass(item, slideActiveClass);\n        }\n      // hidden slides\n      } else {\n        if (!hasAttr(item, 'tabindex')) {\n          setAttrs(item, {\n            'aria-hidden': 'true',\n            'tabindex': '-1'\n          });\n        }\n        if (hasClass(item, slideActiveClass)) {\n          removeClass(item, slideActiveClass);\n        }\n      }\n    }\n  }\n\n  // gallery: update slide position\n  function updateSlidePosition () {\n    if (!carousel) { \n      var l = index + Math.min(slideCount, items);\n      for (var i = slideCountNew; i--;) {\n        var item = slideItems[i];\n\n        if (i >= index && i < l) {\n          // add transitions to visible slides when adjusting their positions\n          addClass(item, 'tns-moving');\n\n          item.style.left = (i - index) * 100 / items + '%';\n          addClass(item, animateIn);\n          removeClass(item, animateNormal);\n        } else if (item.style.left) {\n          item.style.left = '';\n          addClass(item, animateNormal);\n          removeClass(item, animateIn);\n        }\n\n        // remove outlet animation\n        removeClass(item, animateOut);\n      }\n\n      // removing '.tns-moving'\n      setTimeout(function() {\n        [].forEach.call(slideItems, function(el) {\n          removeClass(el, 'tns-moving');\n        });\n      }, 300);\n    }\n  }\n\n  // set tabindex & aria-selected on Nav\n  function updateNavStatus () {\n    // get current nav\n    if (nav) {\n      navCurrentIndex = navClicked !== -1 ? navClicked : index%slideCount;\n      navClicked = -1;\n\n      if (navCurrentIndex !== navCurrentIndexCached) {\n        var navPrev = navItems[navCurrentIndexCached],\n            navCurrent = navItems[navCurrentIndex];\n\n        setAttrs(navPrev, {\n          'tabindex': '-1',\n          'aria-selected': 'false'\n        });\n        setAttrs(navCurrent, {\n          'tabindex': '0',\n          'aria-selected': 'true'\n        });\n        removeClass(navPrev, navActiveClass);\n        addClass(navCurrent, navActiveClass);\n      }\n    }\n  }\n\n  function isButton (el) {\n    return el.nodeName.toLowerCase() === 'button';\n  }\n\n  function isAriaDisabled (el) {\n    return el.getAttribute('aria-disabled') === 'true';\n  }\n\n  function disEnableElement (isButton, el, val) {\n    if (isButton) {\n      el.disabled = val;\n    } else {\n      el.setAttribute('aria-disabled', val.toString());\n    }\n  }\n\n  // set 'disabled' to true on controls when reach the edges\n  function updateControlsStatus () {\n    if (!controls || rewind || loop) { return; }\n\n    var prevDisabled = (prevIsButton) ? prevButton.disabled : isAriaDisabled(prevButton),\n        nextDisabled = (nextIsButton) ? nextButton.disabled : isAriaDisabled(nextButton),\n        disablePrev = (index === indexMin) ? true : false,\n        disableNext = (!rewind && index === indexMax) ? true : false;\n\n    if (disablePrev && !prevDisabled) {\n      disEnableElement(prevIsButton, prevButton, true);\n    }\n    if (!disablePrev && prevDisabled) {\n      disEnableElement(prevIsButton, prevButton, false);\n    }\n    if (disableNext && !nextDisabled) {\n      disEnableElement(nextIsButton, nextButton, true);\n    }\n    if (!disableNext && nextDisabled) {\n      disEnableElement(nextIsButton, nextButton, false);\n    }\n  }\n\n  // set duration\n  function setDurations (duration, target) {\n    duration = !duration ? '' : duration / 1000 + 's';\n    target = target || container;\n    target.style[TRANSITIONDURATION] = duration;\n\n    if (!carousel) {\n      target.style[ANIMATIONDURATION] = duration;\n    }\n    if (!horizontal) {\n      innerWrapper.style[TRANSITIONDURATION] = duration;\n    }\n  }\n\n  function getContainerTransformValue () {\n    var val;\n    if (horizontal) {\n      if (fixedWidth) {\n        val = - (fixedWidth + gutter) * index + 'px';\n      } else {\n        var denominator = TRANSFORM ? slideCountNew : items;\n        val = - index * 100 / denominator + '%';\n      }\n    } else {\n      val = - slideOffsetTops[index] + 'px';\n    }\n    return val;\n  }\n\n  function doContainerTransform (val) {\n    if (!val) { val = getContainerTransformValue(); }\n    container.style[transformAttr] = transformPrefix + val + transformPostfix;\n  }\n\n  function animateSlide (number, classOut, classIn, isOut) {\n    for (var i = number, l = number + items; i < l; i++) {\n      var item = slideItems[i];\n\n      // set item positions\n      if (!isOut) { item.style.left = (i - index) * 100 / items + '%'; }\n\n      if (TRANSITIONDURATION) { setDurations(speed, item); }\n      if (animateDelay && TRANSITIONDELAY) {\n        item.style[TRANSITIONDELAY] = item.style[ANIMATIONDELAY] = animateDelay * (i - number) / 1000 + 's';\n      }\n      removeClass(item, classOut);\n      addClass(item, classIn);\n      \n      if (isOut) { slideItemsOut.push(item); }\n    }\n  }\n\n  // make transfer after click/drag:\n  // 1. change 'transform' property for mordern browsers\n  // 2. change 'left' property for legacy browsers\n  var transformCore = (function () {\n    return carousel ?\n      function (duration, distance) {\n        if (!distance) { distance = getContainerTransformValue(); }\n        \n        // constrain the distance when non-loop no-edgePadding fixedWidth reaches the right edge\n        if (hasRightDeadZone && index === indexMax) {\n          distance = - ((fixedWidth + gutter) * slideCountNew - vpInner) + 'px';\n        }\n\n        if (TRANSITIONDURATION || !duration) {\n          // for morden browsers with non-zero duration or \n          // zero duration for all browsers\n          doContainerTransform(distance);\n          // run fallback function manually \n          // when duration is 0 / container is hidden\n          if (!duration || !isVisible(container)) { onTransitionEnd(); }\n\n        } else {\n          // for old browser with non-zero duration\n          jsTransform(container, transformAttr, transformPrefix, transformPostfix, distance, speed, onTransitionEnd);\n        }\n\n        if (!horizontal) { updateContentWrapperHeight(); }\n      } :\n      function (duration) {\n        slideItemsOut = [];\n\n        var eve = {};\n        eve[TRANSITIONEND] = eve[ANIMATIONEND] = onTransitionEnd;\n        removeEvents(slideItems[indexCached], eve);\n        addEvents(slideItems[index], eve);\n\n        animateSlide(indexCached, animateIn, animateOut, true);\n        animateSlide(index, animateNormal, animateIn);\n\n        // run fallback function manually \n        // when transition or animation not supported / duration is 0\n        if (!TRANSITIONEND || !ANIMATIONEND || !duration) { onTransitionEnd(); }\n      };\n  })();\n\n  function doTransform (duration, distance) {\n    // check duration is defined and is a number\n    if (isNaN(duration)) { duration = speed; }\n\n    // if container is hidden, set duration to 0\n    // to fix an issue where browser doesn't fire ontransitionend on hidden element\n    if (animating && !isVisible(container)) { duration = 0; }\n    \n    if (TRANSITIONDURATION) { setDurations(duration); }\n    transformCore(duration, distance);\n  }\n\n  function render (e, sliderMoved) {\n    if (updateIndexBeforeTransform) { updateIndex(); }\n\n    // render when slider was moved (touch or drag) even though index may not change\n    if (index !== indexCached || sliderMoved) {\n      // events\n      events.emit('indexChanged', info());\n      events.emit('transitionStart', info());\n\n      // pause autoplay when click or keydown from user\n      if (animating && e && ['click', 'keydown'].indexOf(e.type) >= 0) { stopAutoplay(); }\n\n      running = true;\n      doTransform();\n    }\n\n  }\n\n  /*\n   * Transfer prefixed properties to the same format\n   * CSS: -Webkit-Transform => webkittransform\n   * JS: WebkitTransform => webkittransform\n   * @param {string} str - property\n   *\n   */\n  function strTrans (str) {\n    return str.toLowerCase().replace(/-/g, '');\n  }\n\n  // AFTER TRANSFORM\n  // Things need to be done after a transfer:\n  // 1. check index\n  // 2. add classes to visible slide\n  // 3. disable controls buttons when reach the first/last slide in non-loop slider\n  // 4. update nav status\n  // 5. lazyload images\n  // 6. update container height\n  function onTransitionEnd (event) {\n    // check running on gallery mode\n    // make sure trantionend/animationend events run only once\n    if (carousel || running) {\n      events.emit('transitionEnd', info(event));\n\n      if (!carousel && slideItemsOut.length > 0) {\n        for (var i = 0; i < items; i++) {\n          var item = slideItemsOut[i];\n          // set item positions\n          item.style.left = '';\n\n          if (TRANSITIONDURATION) { setDurations(0, item); }\n          if (animateDelay && TRANSITIONDELAY) { \n            item.style[TRANSITIONDELAY] = item.style[ANIMATIONDELAY] = '';\n          }\n          removeClass(item, animateOut);\n          addClass(item, animateNormal);\n        }\n      }\n\n      /* update slides, nav, controls after checking ...\n       * => legacy browsers who don't support 'event' \n       *    have to check event first, otherwise event.target will cause an error \n       * => or 'gallery' mode: \n       *   + event target is slide item\n       * => or 'carousel' mode: \n       *   + event target is container, \n       *   + event.property is the same with transform attribute\n       */\n      if (!event || \n          !carousel && event.target.parentNode === container || \n          event.target === container && strTrans(event.propertyName) === strTrans(transformAttr)) {\n\n        if (!updateIndexBeforeTransform) { \n          var indexTem = index;\n          updateIndex();\n          if (index !== indexTem) { \n            events.emit('indexChanged', info());\n\n            if (TRANSITIONDURATION) { setDurations(0); }\n            doContainerTransform();\n          }\n        } \n\n        runAutoHeight();\n\n        if (nested === 'inner') { events.emit('innerLoaded', info()); }\n        running = false;\n        navCurrentIndexCached = navCurrentIndex;\n        indexCached = index;\n      }\n    }\n\n  }\n\n  // # ACTIONS\n  function goTo (targetIndex, e) {\n    if (freeze) { return; }\n\n    // prev slideBy\n    if (targetIndex === 'prev') {\n      onControlsClick(e, -1);\n\n    // next slideBy\n    } else if (targetIndex === 'next') {\n      onControlsClick(e, 1);\n\n    // go to exact slide\n    } else if (!running) {\n      var absIndex = index%slideCount, \n          indexGap = 0;\n      if (absIndex < 0) { absIndex += slideCount; }\n\n      if (targetIndex === 'first') {\n        indexGap = - absIndex;\n      } else if (targetIndex === 'last') {\n        indexGap = slideCount - items - absIndex;\n      } else {\n        if (typeof targetIndex !== 'number') { targetIndex = parseInt(targetIndex); }\n        if (!isNaN(targetIndex)) {\n          var absTargetIndex = targetIndex%slideCount;\n          if (absTargetIndex < 0) { absTargetIndex += slideCount; }\n          indexGap = absTargetIndex - absIndex;\n        }\n      }\n\n      index += indexGap;\n\n      // if index is changed, start rendering\n      if (index%slideCount !== indexCached%slideCount) {\n        render(e);\n      }\n\n    }\n  }\n\n  // on controls click\n  function onControlsClick (e, dir) {\n    if (!running) {\n      var passEventObject;\n\n      if (!dir) {\n        e = e || win.event;\n        var target = e.target || e.srcElement;\n\n        while (target !== controlsContainer && [prevButton, nextButton].indexOf(target) < 0) { target = target.parentNode; }\n\n        var targetIn = [prevButton, nextButton].indexOf(target);\n        if (targetIn >= 0) {\n          passEventObject = true;\n          dir = targetIn === 0 ? -1 : 1;\n        }\n      }\n\n      if (rewind) {\n        if (index === indexMin && dir === -1) {\n          goTo('last', e);\n          return;\n        } else if (index === indexMax && dir === 1) {\n          goTo(0, e);\n          return;\n        }\n      }\n\n      if (dir) {\n        index += slideBy * dir;\n        // pass e when click control buttons or keydown\n        render(passEventObject || e && e.type === 'keydown' ? e : null);\n      }\n    }\n  }\n\n  // on nav click\n  function onNavClick (e) {\n    if (!running) {\n      e = e || win.event;\n      var target = e.target || e.srcElement,\n          navIndex;\n\n      // find the clicked nav item\n      while (target !== navContainer && !hasAttr(target, 'data-nav')) { target = target.parentNode; }\n      if (hasAttr(target, 'data-nav')) {\n        navIndex = navClicked = [].indexOf.call(navItems, target);\n        goTo(navIndex, e);\n      }\n    }\n  }\n\n  // autoplay functions\n  function setAutoplayTimer () {\n    autoplayTimer = setInterval(function () {\n      onControlsClick(null, autoplayDirection);\n    }, autoplayTimeout);\n\n    animating = true;\n  }\n\n  function stopAutoplayTimer () {\n    clearInterval(autoplayTimer);\n    animating = false;\n  }\n\n  function updateAutoplayButton (action, txt) {\n    setAttrs(autoplayButton, {'data-action': action});\n    autoplayButton.innerHTML = autoplayHtmlStrings[0] + action + autoplayHtmlStrings[1] + txt;\n  }\n\n  function startAutoplay () {\n    setAutoplayTimer();\n    if (autoplayButton) { updateAutoplayButton('stop', autoplayText[1]); }\n  }\n\n  function stopAutoplay () {\n    stopAutoplayTimer();\n    if (autoplayButton) { updateAutoplayButton('start', autoplayText[0]); }\n  }\n\n  // programaitcally play/pause the slider\n  function play () {\n    if (autoplay && !animating) {\n      startAutoplay();\n      autoplayUserPaused = false;\n    }\n  }\n  function pause () {\n    if (animating) {\n      stopAutoplay();\n      autoplayUserPaused = true;\n    }\n  }\n\n  function toggleAutoplay () {\n    if (animating) {\n      stopAutoplay();\n      autoplayUserPaused = true;\n    } else {\n      startAutoplay();\n      autoplayUserPaused = false;\n    }\n  }\n\n  function onVisibilityChange () {\n    if (doc.hidden) {\n      if (animating) {\n        stopAutoplayTimer();\n        autoplayVisibilityPaused = true;\n      }\n    } else if (autoplayVisibilityPaused) {\n      setAutoplayTimer();\n      autoplayVisibilityPaused = false;\n    }\n  }\n\n  function mouseoverPause () {\n    if (animating) { \n      stopAutoplayTimer();\n      autoplayHoverPaused = true;\n    }\n  }\n\n  function mouseoutRestart () {\n    if (autoplayHoverPaused) { \n      setAutoplayTimer();\n      autoplayHoverPaused = false;\n    }\n  }\n\n  // keydown events on document \n  function onDocumentKeydown (e) {\n    e = e || win.event;\n    switch(e.keyCode) {\n      case KEYS.LEFT:\n        onControlsClick(e, -1);\n        break;\n      case KEYS.RIGHT:\n        onControlsClick(e, 1);\n    }\n  }\n\n  // on key control\n  function onControlsKeydown (e) {\n    e = e || win.event;\n    var code = e.keyCode;\n\n    switch (code) {\n      case KEYS.LEFT:\n      case KEYS.UP:\n      case KEYS.PAGEUP:\n          if (!prevButton.disabled) {\n            onControlsClick(e, -1);\n          }\n          break;\n      case KEYS.RIGHT:\n      case KEYS.DOWN:\n      case KEYS.PAGEDOWN:\n          if (!nextButton.disabled) {\n            onControlsClick(e, 1);\n          }\n          break;\n      case KEYS.HOME:\n        goTo(0, e);\n        break;\n      case KEYS.END:\n        goTo(slideCount - 1, e);\n        break;\n    }\n  }\n\n  // set focus\n  function setFocus (focus) {\n    focus.focus();\n  }\n\n  // on key nav\n  function onNavKeydown (e) {\n    var curElement = doc.activeElement;\n    if (!hasAttr(curElement, 'data-nav')) { return; }\n\n    e = e || win.event;\n    var code = e.keyCode,\n        navIndex = [].indexOf.call(navItems, curElement),\n        len = visibleNavIndexes.length,\n        current = visibleNavIndexes.indexOf(navIndex);\n\n    if (options.navContainer) {\n      len = slideCount;\n      current = navIndex;\n    }\n\n    function getNavIndex (num) {\n      return options.navContainer ? num : visibleNavIndexes[num];\n    }\n\n    switch(code) {\n      case KEYS.LEFT:\n      case KEYS.PAGEUP:\n        if (current > 0) { setFocus(navItems[getNavIndex(current - 1)]); }\n        break;\n\n      case KEYS.UP:\n      case KEYS.HOME:\n        if (current > 0) { setFocus(navItems[getNavIndex(0)]); }\n        break;\n\n      case KEYS.RIGHT:\n      case KEYS.PAGEDOWN:\n        if (current < len - 1) { setFocus(navItems[getNavIndex(current + 1)]); }\n        break;\n\n      case KEYS.DOWN:\n      case KEYS.END:\n        if (current < len - 1) { setFocus(navItems[getNavIndex(len - 1)]); }\n        break;\n\n      // Can't use onNavClick here,\n      // Because onNavClick require event.target as nav items\n      case KEYS.ENTER:\n      case KEYS.SPACE:\n        navClicked = navIndex;\n        goTo(navIndex, e);\n        break;\n    }\n  }\n\n  // IE10 scroll function\n  function ie10Scroll () {\n    doTransform(0, container.scrollLeft());\n    indexCached = index;\n  }\n\n  function getTarget (e) {\n    return e.target || e.srcElement;\n  }\n\n  function isTouchEvent (e) {\n    return e.type.indexOf('touch') >= 0;\n  }\n\n  function preventDefaultBehavior (e) {\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n  }\n\n  function onTouchOrMouseStart (e) {\n    // reset \n    moveDirectionExpected = 0;\n    touchedOrDraged = false;\n    startX = startY = null;\n\n    if (!running) {\n      e = e || win.event;\n      var ev; \n\n      if (isTouchEvent(e)) {\n        ev = e.changedTouches[0];\n        events.emit('touchStart', info(e));\n      } else {\n        ev = e;\n        preventDefaultBehavior(e);\n        events.emit('dragStart', info(e));\n      }\n\n      startX = parseInt(ev.clientX);\n      startY = parseInt(ev.clientY);\n      translateInit = parseFloat(container.style[transformAttr].replace(transformPrefix, '').replace(transformPostfix, ''));\n    }\n  }\n\n  function onTouchOrMouseMove (e) {\n    // make sure touch started or mouse draged\n    if (!running && startX !== null) {\n      e = e || win.event;\n      var ev;\n\n      if (isTouchEvent(e)) {\n        ev = e.changedTouches[0];\n      } else {\n        ev = e;\n        preventDefaultBehavior(e);\n      }\n\n      disX = parseInt(ev.clientX) - startX;\n      disY = parseInt(ev.clientY) - startY;\n\n      if (moveDirectionExpected === 0) {\n        moveDirectionExpected = getTouchDirection(toDegree(disY, disX), 15) === options.axis;\n      }\n\n      if (moveDirectionExpected) {\n        if (isTouchEvent(e)) {\n          events.emit('touchMove', info(e));\n        } else {\n          // \"mousemove\" event after \"mousedown\" indecate \n          // it is \"drag\", not \"click\"\n          if (!isDragEvent) { isDragEvent = true; }\n          events.emit('dragMove', info(e));\n        }\n        if (!touchedOrDraged) { touchedOrDraged = true; }\n\n        var x = translateInit;\n        if (horizontal) {\n          if (fixedWidth) {\n            x += disX;\n            x += 'px';\n          } else {\n            var percentageX = TRANSFORM ? disX * items * 100 / (vpInner * slideCountNew): disX * 100 / vpInner;\n            x += percentageX;\n            x += '%';\n          }\n        } else {\n          x += disY;\n          x += 'px';\n        }\n\n        if (TRANSFORM) { setDurations(0); }\n        container.style[transformAttr] = transformPrefix + x + transformPostfix;\n      }\n    }\n  }\n\n  function onTouchOrMouseEnd (e) {\n    if (!running && touchedOrDraged) {\n      e = e || win.event;\n      var ev;\n\n      if (isTouchEvent(e)) {\n        ev = e.changedTouches[0];\n        events.emit('touchEnd', info(e));\n      } else {\n        ev = e;\n        events.emit('dragEnd', info(e));\n      }\n\n      disX = parseInt(ev.clientX) - startX;\n      disY = parseInt(ev.clientY) - startY;\n      var sliderMoved = Boolean(horizontal ? disX : disY);\n\n      // reset \n      moveDirectionExpected = 0;\n      touchedOrDraged = false;\n      startX = startY = null;\n\n      if (horizontal) {\n        var indexMoved = - disX * items / vpInner;\n        indexMoved = disX > 0 ? Math.floor(indexMoved) : Math.ceil(indexMoved);\n        index += indexMoved;\n      } else {\n        var moved = - (translateInit + disY);\n        if (moved <= 0) {\n          index = indexMin;\n        } else if (moved >= slideOffsetTops[slideOffsetTops.length - 1]) {\n          index = indexMax;\n        } else {\n          var i = 0;\n          do {\n            i++;\n            index = disY < 0 ? i + 1 : i;\n          } while (i < slideCountNew && moved >= slideOffsetTops[i + 1]);\n        }\n      }\n      \n      render(e, sliderMoved);\n\n      // drag vs click\n      if (isDragEvent) { \n        // reset isDragEvent\n        isDragEvent = false;\n\n        // prevent \"click\"\n        var target = getTarget(e);\n        addEvents(target, {'click': function preventClick (e) {\n          preventDefaultBehavior(e);\n          removeEvents(target, {'click': preventClick});\n        }}); \n      } \n    }\n  }\n\n  // === RESIZE FUNCTIONS === //\n  // (slideOffsetTops, index, items) => vertical_conentWrapper.height\n  function updateContentWrapperHeight () {\n    innerWrapper.style.height = slideOffsetTops[index + items] - slideOffsetTops[index] + 'px';\n  }\n\n  /*\n   * get nav item indexes per items\n   * add 1 more if the nav items cann't cover all slides\n   * [0, 1, 2, 3, 4] / 3 => [0, 3]\n   */\n  function getVisibleNavIndex () {\n    // reset visibleNavIndexes\n    visibleNavIndexes = [];\n\n    var absIndexMin = index%slideCount%items;\n    while (absIndexMin < slideCount) {\n      if (!loop && absIndexMin + items > slideCount) { absIndexMin = slideCount - items; }\n      visibleNavIndexes.push(absIndexMin);\n      absIndexMin += items;\n    }\n\n    // nav count * items < slide count means\n    // some slides can not be displayed only by nav clicking\n    if (loop && visibleNavIndexes.length * items < slideCount ||\n        !loop && visibleNavIndexes[0] > 0) {\n      visibleNavIndexes.unshift(0);\n    }\n  }\n  \n  /*\n   * 1. update visible nav items list\n   * 2. add \"hidden\" attributes to previous visible nav items\n   * 3. remove \"hidden\" attrubutes to new visible nav items\n   */\n  function updateNavVisibility () {\n    if (!nav || navAsThumbnails) { return; }\n    getVisibleNavIndex();\n\n    if (visibleNavIndexes !== visibleNavIndexesCached) {\n      [].forEach.call(navItems, function(el, i) {\n        if (visibleNavIndexes.indexOf(i) < 0) {\n          hideElement(el);\n        } else {\n          showElement(el);\n        }\n      });\n\n      // cache visible nav indexes\n      visibleNavIndexesCached = visibleNavIndexes;\n    }\n  }\n\n  function info (e) {\n    return {\n      container: container,\n      slideItems: slideItems,\n      navContainer: navContainer,\n      navItems: navItems,\n      controlsContainer: controlsContainer,\n      hasControls: hasControls,\n      prevButton: prevButton,\n      nextButton: nextButton,\n      items: items,\n      slideBy: slideBy,\n      cloneCount: cloneCount,\n      slideCount: slideCount,\n      slideCountNew: slideCountNew,\n      index: index,\n      indexCached: indexCached,\n      navCurrentIndex: navCurrentIndex,\n      navCurrentIndexCached: navCurrentIndexCached,\n      visibleNavIndexes: visibleNavIndexes,\n      visibleNavIndexesCached: visibleNavIndexesCached,\n      event: e || {},\n    };\n  }\n\n  return {\n    getInfo: info,\n    events: events,\n    goTo: goTo,\n    play: play,\n    pause: pause,\n    isOn: isOn,\n    rebuild: function() {\n      return tns(options);\n    },\n\n    destroy: function () {\n      // remove win event listeners\n      removeEvents(win, {'resize': onResize});\n\n      // remove arrowKeys eventlistener\n      removeEvents(doc, docmentKeydownEvent);\n\n      // sheet\n      sheet.disabled = true;\n\n      // cloned items\n      if (loop) {\n        for (var j = cloneCount; j--;) {\n          if (carousel) { slideItems[0].remove(); }\n          slideItems[slideItems.length - 1].remove();\n        }\n      }\n\n      // Slide Items\n      var slideClasses = ['tns-item', slideActiveClass];\n      if (!carousel) { slideClasses = slideClasses.concat('tns-normal', animateIn); }\n\n      for (var i = slideCount; i--;) {\n        var slide = slideItems[i];\n        if (slide.id.indexOf(slideId + '-item') >= 0) { slide.id = ''; }\n\n        slideClasses.forEach(function(cl) { removeClass(slide, cl); });\n      }\n      removeAttrs(slideItems, ['style', 'aria-hidden', 'tabindex']);\n      slideItems = slideId = slideCount = slideCountNew = cloneCount = null;\n\n      // controls\n      if (controls) {\n        removeEvents(controlsContainer, controlsEvents);\n        if (options.controlsContainer) {\n          removeAttrs(controlsContainer, ['aria-label', 'tabindex']);\n          removeAttrs(controlsContainer.children, ['aria-controls', 'aria-disabled', 'tabindex']);\n        }\n        controlsContainer = prevButton = nextButton = null;\n      }\n\n      // nav\n      if (nav) {\n        removeEvents(navContainer, navEvents);\n        if (options.navContainer) {\n          removeAttrs(navContainer, ['aria-label']);\n          removeAttrs(navItems, ['aria-selected', 'aria-controls', 'tabindex']);\n        }\n        navContainer = navItems = null;\n      }\n\n      // auto\n      if (autoplay) {\n        clearInterval(autoplayTimer);\n        if (autoplayButton) {\n          removeEvents(autoplayButton, {'click': toggleAutoplay});\n        }\n        removeEvents(container, hoverEvents);\n        removeEvents(container, visibilityEvent);\n        if (options.autoplayButton) {\n          removeAttrs(autoplayButton, ['data-action']);\n        }\n      }\n\n      // container\n      container.id = containerIdCached || '';\n      container.className = container.className.replace(classContainer, '');\n      removeElementStyles(container);\n      if (carousel && TRANSITIONEND) {\n        var eve = {};\n        eve[TRANSITIONEND] = onTransitionEnd;\n        removeEvents(container, eve);\n      }\n      removeEvents(container, touchEvents);\n      removeEvents(container, dragEvents);\n\n      // outerWrapper\n      containerParent.insertBefore(container, outerWrapper);\n      outerWrapper.remove();\n      outerWrapper = innerWrapper = container =\n      index = indexCached = items = slideBy = navCurrentIndex = navCurrentIndexCached = hasControls = visibleNavIndexes = visibleNavIndexesCached = \n      this.getInfo = this.events = this.goTo = this.play = this.pause = this.destroy = null;\n      this.isOn = isOn = false;\n    }\n  };\n};\n\nreturn tns;\n})();","import tns from 'tiny-slider'\n// import { tns } from '../node_modules/tiny-slider/src/tiny-slider'\n\nfunction initTiny () {\n  console.log(tns)\n  var slider = tns({\n    container: '.my-slider',\n    items: 3,\n    slideBy: 'page',\n    autoplay: true\n  });\n}\n\nwindow.addEventListener('load', initTiny)\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}